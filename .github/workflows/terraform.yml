# name: "Terraform"

# on:
#   # push:
#   #   branches:
#   #     - main
#   # pull_request:

# jobs:
#   terraform:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1
#         with:
#           cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}

#       - name: Terraform Format
#         id: fmt
#         working-directory: terraform
#         run: terraform fmt -check

#       - name: Terraform Init
#         id: init
#         working-directory: terraform
#         run: terraform init

#       - name: Terraform Validate
#         id: validate
#         working-directory: terraform
#         run: terraform validate -no-color

#       - uses: actions/github-script@v6
#         if: github.event_name == 'pull_request'
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const response = await github.rest.issues.listComments({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               issue_number: context.issue.number
#             })
#             response.data.filter(comment => comment.body.indexOf("Terraform Format and Style") > -1).forEach(comment => {
#               github.rest.issues.deleteComment({
#                 owner: context.repo.owner,
#                 repo: context.repo.repo,
#                 comment_id: comment.id
#               })
#             })

#       - name: Terraform Plan
#         id: plan
#         if: github.event_name == 'pull_request'
#         working-directory: terraform
#         run: terraform plan -no-color
#         continue-on-error: true

#       - uses: actions/github-script@v6
#         if: github.event_name == 'pull_request'
#         env:
#           PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             // Create new comment
#             const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#             #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#             #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#             #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#             <details><summary>Show Plan</summary>

#             \`\`\`
#             ${process.env.PLAN}
#             \`\`\`

#             </details>

#             *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

#             github.rest.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: output
#             })
#       - name: Terraform Plan Status
#         if: steps.plan.outcome == 'failure'
#         run: exit 1

#       # - name: Terraform Apply
#       #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#       #   run: terraform apply -auto-approve
